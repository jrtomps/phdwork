// TargetHit.hh
//
// Jeromy Tompkins
// 9/16/2011
//
// This was originally the file AsymHit.hh, written by John Hardin.
// This class is the "package" that will be implemented for storing
// data by the TargetSensitivity class.

#include <algorithm>
#include "G4VHit.hh"
#include "G4ThreeVector.hh"
#include "G4THitsCollection.hh"
#include "G4VHitsCollection.hh"
#include "G4ThreeVector.hh"

#ifndef TargetHIT_H
#define TargetHIT_H

class G4Step;

//! A class to be used in debugging the initialization list of TargetHit
class TargetDebugMsg
{
public:
  //! Constructor
  /*!
   * Prints the message that the TargetHit is being constructed
   * @param id is the detector id
   */
  TargetDebugMsg(G4int id)
  {
    std::cout << "Constructing TargetHit in det#" << id << std::endl;
  };
  //! Constructor
  /*!
   * Prints the message that the TargetHit is being constructed
   * @param name is the detector name
   */
  TargetDebugMsg(G4String name)
  {
    std::cout << "Constructing TargetHit in " << name.data() << std::endl;
  };
  
};

//! A class that stores the data generated by TargetSensitivity
/*!
 * This class is the concrete definition of the G4VHit class. It
 * is produced by TargetSensitivity objects when a step results in a
 * position located on one of the Si strips.
 *
 * This class keeps track of the following data:
 *   - prestep vertex position
 *   - displacement during step
 *   - prestep momentum direction
 *   - momentum change during step
 *   - total energy deposit
 *   - nonionizing energy deposit
 *   - initial KE
 *   - final KE
 *   - particle name
 *   - particle mass
 *   - particle charge
 *
 * When this is summed, only the following quantities are summed
 *   - displacement during step
 *   - momentum change during step
 *   - total energy deposit
 *   - nonionizing energy deposit
 *
 */
class TargetHit : public G4VHit
{

public:
  //! Default constructor
  TargetHit(void);
  //! Constructor
  /*!
   * @param aStep is the current G4Step that is used to get information from
   */
  TargetHit(G4Step* aStep);
  //! Constructor
  /*!
   * The detector name is set by the map owned by this object that maps the 
   * idetector to the name.
   * 
   * @param aStep is the current G4Step that is used to get information from
*/
  TargetHit(const TargetHit& obj);
  TargetHit& operator=(TargetHit obj);
  friend void swap(TargetHit& lhs, TargetHit& rhs);

  //! Deconstructor
  /*!
   * An empty function
   */ 
  ~TargetHit(void);


  TargetHit& operator+=(TargetHit& obj);

private:  
  //  TargetDebugMsg             fmsg;
  G4double                fphi; //!< Net angle phi
  G4double              ftheta; //!< Net angle theta
  G4ThreeVector  finitWorldPos; //!< Initial world position of particle
  G4ThreeVector fdisplWorldPos; //!< World particle displacement
  G4ThreeVector  finitMomentum; //!< Initial particle velocity
  G4ThreeVector fdeltaMomentum; //!< Particle momentum change
  G4double             finitKE; //!< Initial particle kinetic energy
  G4double            ffinalKE; //!< Final particle kinetic energy
  G4double              fdepKE; //!< Deposited energy in the detector
  G4double         fnonIonizingDepE;
  G4String       fparticleName; //!< Particle name
  G4double               fmass; //!< Mass of the particle
  G4double             fcharge; //!< Charge of the particle
  G4double        fdeltaCharge;
  
  //! Normal member function
  /*!
   * Sets up the internal map for identifying the detectorID with the appropriate
   * name
   */
  void SetupDetLocationMap(void);

public:
  //! Normal member function
  /*!
   * Returns the azimuthal angle in units of degrees
   */
  G4double GetPhi(void)      const {return fphi/deg;     };
  //! Normal member function
  /*!
   * Returns the polar angle in unis of degrees
   */
  G4double GetTheta(void)    const {return ftheta/deg;   }
  G4ThreeVector GetInitWorldPos(void) const {return finitWorldPos;}
  G4ThreeVector GetDeltaPosition(void) const {return fdisplWorldPos;}
  G4ThreeVector GetInitMomentum(void) const {return finitMomentum;}
  G4ThreeVector GetDeltaMomentum(void) const {return fdeltaMomentum;}
  G4double GetInitKE(void) const {return finitKE;}
  G4double GetFinalKE(void)       const {return ffinalKE;}
  G4double GetDepE(void)  const   {return fdepKE; }
  G4double GetNonIonizingEnergyDeposit (void) const {return fnonIonizingDepE;}
  G4String GetParticleName(void) const {return fparticleName;}
  G4double GetMass(void) const {return fmass;}
  G4double GetCharge(void) const {return fcharge;}
  G4double GetDeltaCharge(void) const {return fdeltaCharge; }
};

inline void swap(TargetHit &lhs, TargetHit &rhs)
{
    using std::swap;
    swap(lhs.fphi, rhs.fphi);
    swap(lhs.ftheta, rhs.ftheta);
    swap(lhs.finitWorldPos, rhs.finitWorldPos);
    swap(lhs.fdisplWorldPos, rhs.fdisplWorldPos);
    swap(lhs.finitMomentum, rhs.finitMomentum);
    swap(lhs.fdeltaMomentum, rhs.fdeltaMomentum);
    swap(lhs.finitKE, rhs.finitKE);
    swap(lhs.ffinalKE, rhs.ffinalKE);
    swap(lhs.fdepKE, rhs.fdepKE);
    swap(lhs.fnonIonizingDepE, rhs.fnonIonizingDepE);
    swap(lhs.fparticleName, rhs.fparticleName);
    swap(lhs.fmass, rhs.fmass);
    swap(lhs.fcharge, rhs.fcharge);
    swap(lhs.fdeltaCharge, rhs.fdeltaCharge);
}

typedef G4THitsCollection<TargetHit> TargetHitsCollection;

#endif
