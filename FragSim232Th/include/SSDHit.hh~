// SSDHit.hh
//
// Jeromy Tompkins
// 9/16/2011
//
// This was originally the file AsymHit.hh, written by John Hardin.
// This class is the "package" that will be implemented for storing
// data by the SSDSensitivity class.

#include <algorithm>
#include "G4VHit.hh"
#include "G4ThreeVector.hh"
#include "G4THitsCollection.hh"
#include "G4VHitsCollection.hh"
#include "G4ThreeVector.hh"

#ifndef SSDHIT_H
#define SSDHIT_H

class G4Step;

//! A class to be used in debugging the initialization list of SSDHit
class SSDDebugMsg
{
public:
  //! Constructor
  /*!
   * Prints the message that the SSDHit is being constructed
   * @param id is the detector id
   */
  SSDDebugMsg(G4int id)
  {
    std::cout << "Constructing SSDHit in det#" << id << std::endl;
  };
  //! Constructor
  /*!
   * Prints the message that the SSDHit is being constructed
   * @param name is the detector name
   */
  SSDDebugMsg(G4String name)
  {
    std::cout << "Constructing SSDHit in " << name.data() << std::endl;
  };
  
};

//! A class that stores the data generated by SSDSensitivity
/*!
 * This class is the concrete definition of the G4VHit class. It
 * is produced by SSDSensitivity objects when a step results in a 
 * position located on one of the Si strips.
 */
class SSDHit : public G4VHit
{

public:
  //! Default constructor
  SSDHit(void);
  //! Constructor
  /*!
   * @param aStep is the current G4Step that is used to get information from
   * @param iSistrip is the strip number that was hit.
   */
  SSDHit(G4Step* aStep, G4int iSistrip);
  //! Constructor
  /*!
   * The detector name is set by the map owned by this object that maps the 
   * idetector to the name.
   * 
   * @param aStep is the current G4Step that is used to get information from
   * @param idetector is the id of the SSD associated with the SSDSensitivity creating this
   * @param iSistrip is the strip number that was hit.
   */
  SSDHit(G4Step* aStep, G4int idetector, G4int iSistrip);

  //! Constructor
  /*!
   * This constructor provides the ability to set the name to any value
   * @param idetName is the name of the SSD associated with the SSDSensitivity creating this
   * @param aStep is the current G4Step that is used to get information from
   * @param idetector is the id of the SSD associated with the SSDSensitivity creating this
   * @param iSistrip is the strip number that was hit.
   */
  SSDHit(G4String idetname, G4Step *aStep, G4int idetector, G4int iSistrip);


  SSDHit(const SSDHit& obj);
  SSDHit& operator=(SSDHit obj);
  friend void swap(SSDHit& lhs, SSDHit& rhs);

  //! Deconstructor
  /*!
   * An empty function
   */ 
  ~SSDHit(void);


  SSDHit& operator+=(SSDHit& obj);

private:  
  //  SSDDebugMsg             fmsg;
  G4int                 fdetID; //!< Detector ID 
  G4int               fsiStrip; //!< Strip ID
  G4double                fphi; //!< Angle phi
  G4double              ftheta; //!< Angle theta
  G4ThreeVector  finitWorldPos; //!< Initial world position of particle
  G4ThreeVector ffinalWorldPos; //!< Final world position particle
  G4ThreeVector ffinalLocalPos; //!< Final local position particle
  G4ThreeVector  finitMomentum; //!< Initial particle velocity
  G4ThreeVector ffinalMomentum; //!< Final particle velocity
  G4double             finitKE; //!< Initial particle kinetic energy
  G4double            ffinalKE; //!< Final particle kinetic energy
  G4double              fdepKE; //!< Deposited energy in the detector
  G4String            fdetName; //!< A prestring for use in CSV output
  G4String       fparticleName; //!< Particle name
  G4double               fmass; //!< Mass of the particle
  G4double             fcharge; //!< Charge of the particle
  
  std::map<G4int, G4String> fdetLocationMap; //!< Maps the detectorID to the name

  //! Normal member function
  /*!
   * Sets up the internal map for identifying the detectorID with the appropriate
   * name
   */
  void SetupDetLocationMap(void);

public:
  void SetPhiTheta(G4double iphi,G4double ithe);
  void SetPhiTheta(G4Step *aStep);
  void SetDetName(G4String name);
  void SetLocalPos(const G4ThreeVector& avec);
 
  G4int    GetDetID(void) const {return fdetID;};
  G4int    GetStripID(void)    const {return fsiStrip; };
  //! Normal member function
  /*!
   * Returns the azimuthal angle in units of degrees
   */
  G4double GetPhi(void)      const {return fphi/deg;     };
  //! Normal member function
  /*!
   * Returns the polar angle in unis of degrees
   */
  G4double GetTheta(void)    const {return ftheta/deg;   };
  G4ThreeVector GetInitWorldPos(void) const {return finitWorldPos;};
  G4ThreeVector GetFinalWorldPos(void) const {return ffinalWorldPos;};
  G4ThreeVector GetFinalLocalPos(void) const {return ffinalLocalPos;};
  G4ThreeVector GetInitMomentum(void) const {return finitMomentum;};
  G4ThreeVector GetFinalMomentum(void) const {return ffinalMomentum;};
  G4double GetInitKE(void) const {return finitKE;};
  G4double GetFinalKE(void)       const {return ffinalKE;      };
  G4double GetDepKE(void)  const   {return fdepKE; }
  G4String GetParticleName(void) const {return fparticleName;};
  G4double GetMass(void) const {return fmass;};
  G4double GetCharge(void) const {return fcharge;};
};

inline void swap(SSDHit &lhs, SSDHit &rhs)
{
    using std::swap;
    swap(lhs.fdetID, rhs.fdetID);
    swap(lhs.fsiStrip, rhs.fsiStrip);
    swap(lhs.fphi, rhs.fphi);
    swap(lhs.ftheta, rhs.ftheta);
    swap(lhs.finitWorldPos, rhs.finitWorldPos);
    swap(lhs.ffinalWorldPos, rhs.ffinalWorldPos);
    swap(lhs.ffinalLocalPos, rhs.ffinalLocalPos);
    swap(lhs.finitMomentum, rhs.finitMomentum);
    swap(lhs.ffinalMomentum, rhs.ffinalMomentum);
    swap(lhs.finitKE, rhs.finitKE);
    swap(lhs.ffinalKE, rhs.ffinalKE);
    swap(lhs.fdepKE, rhs.fdepKE);
    swap(lhs.fdetName, rhs.fdetName);
    swap(lhs.fparticleName, rhs.fparticleName);
    swap(lhs.fmass, rhs.fmass);
    swap(lhs.fcharge, rhs.fcharge);
}

typedef G4THitsCollection<SSDHit> SSDHitsCollection;

#endif
