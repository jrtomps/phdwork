//
// File generated by /usr/local/root/bin/rootcint at Sat Aug 18 12:59:38 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dictNuclearChart
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "dictNuclearChart.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Isotope_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Isotope(void *p = 0);
   static void *newArray_Isotope(Long_t size, void *p);
   static void delete_Isotope(void *p);
   static void deleteArray_Isotope(void *p);
   static void destruct_Isotope(void *p);
   static void streamer_Isotope(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Isotope*)
   {
      ::Isotope *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Isotope >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Isotope", ::Isotope::Class_Version(), "./Isotope.h", 9,
                  typeid(::Isotope), DefineBehavior(ptr, ptr),
                  &::Isotope::Dictionary, isa_proxy, 0,
                  sizeof(::Isotope) );
      instance.SetNew(&new_Isotope);
      instance.SetNewArray(&newArray_Isotope);
      instance.SetDelete(&delete_Isotope);
      instance.SetDeleteArray(&deleteArray_Isotope);
      instance.SetDestructor(&destruct_Isotope);
      instance.SetStreamerFunc(&streamer_Isotope);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Isotope*)
   {
      return GenerateInitInstanceLocal((::Isotope*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Isotope*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void NuclearChart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_NuclearChart(void *p);
   static void deleteArray_NuclearChart(void *p);
   static void destruct_NuclearChart(void *p);
   static void streamer_NuclearChart(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::NuclearChart*)
   {
      ::NuclearChart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::NuclearChart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("NuclearChart", ::NuclearChart::Class_Version(), "./NuclearChart.h", 12,
                  typeid(::NuclearChart), DefineBehavior(ptr, ptr),
                  &::NuclearChart::Dictionary, isa_proxy, 0,
                  sizeof(::NuclearChart) );
      instance.SetDelete(&delete_NuclearChart);
      instance.SetDeleteArray(&deleteArray_NuclearChart);
      instance.SetDestructor(&destruct_NuclearChart);
      instance.SetStreamerFunc(&streamer_NuclearChart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::NuclearChart*)
   {
      return GenerateInitInstanceLocal((::NuclearChart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::NuclearChart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Isotope::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Isotope::Class_Name()
{
   return "Isotope";
}

//______________________________________________________________________________
const char *Isotope::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Isotope::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Isotope::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Isotope::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *NuclearChart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *NuclearChart::Class_Name()
{
   return "NuclearChart";
}

//______________________________________________________________________________
const char *NuclearChart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::NuclearChart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int NuclearChart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::NuclearChart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void NuclearChart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::NuclearChart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *NuclearChart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::NuclearChart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void NuclearChart::Streamer(TBuffer &R__b)
{
   // Stream an object of class NuclearChart.

   ::Error("NuclearChart::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void NuclearChart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class NuclearChart.
      TClass *R__cl = ::NuclearChart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameMap", (void*)&fNameMap);
      R__insp.InspectMember("map<std::string,UInt_t>", (void*)&fNameMap, "fNameMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZMap", (void*)&fZMap);
      R__insp.InspectMember("map<UInt_t,std::string>", (void*)&fZMap, "fZMap.", false);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_NuclearChart(void *p) {
      delete ((::NuclearChart*)p);
   }
   static void deleteArray_NuclearChart(void *p) {
      delete [] ((::NuclearChart*)p);
   }
   static void destruct_NuclearChart(void *p) {
      typedef ::NuclearChart current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_NuclearChart(TBuffer &buf, void *obj) {
      ((::NuclearChart*)obj)->::NuclearChart::Streamer(buf);
   }
} // end of namespace ROOT for class ::NuclearChart

//______________________________________________________________________________
void Isotope::Streamer(TBuffer &R__b)
{
   // Stream an object of class Isotope.

   ::Error("Isotope::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void Isotope::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Isotope.
      TClass *R__cl = ::Isotope::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A", &A);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Isotope(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Isotope : new ::Isotope;
   }
   static void *newArray_Isotope(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Isotope[nElements] : new ::Isotope[nElements];
   }
   // Wrapper around operator delete
   static void delete_Isotope(void *p) {
      delete ((::Isotope*)p);
   }
   static void deleteArray_Isotope(void *p) {
      delete [] ((::Isotope*)p);
   }
   static void destruct_Isotope(void *p) {
      typedef ::Isotope current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Isotope(TBuffer &buf, void *obj) {
      ((::Isotope*)obj)->::Isotope::Streamer(buf);
   }
} // end of namespace ROOT for class ::Isotope

/********************************************************
* dictNuclearChart.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtabledictNuclearChart();

extern "C" void G__set_cpp_environmentdictNuclearChart() {
  G__cpp_reset_tagtabledictNuclearChart();
}
#include <new>
extern "C" int G__cpp_dllrevdictNuclearChart() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Isotope */
static int G__dictNuclearChart_162_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isotope* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isotope[n];
     } else {
       p = new((void*) gvp) Isotope[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isotope;
     } else {
       p = new((void*) gvp) Isotope;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isotope* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Isotope((const UInt_t) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Isotope((const UInt_t) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Isotope::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isotope::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Isotope::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Isotope::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Isotope*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isotope::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isotope::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isotope::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_162_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isotope::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dictNuclearChart_162_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Isotope* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Isotope(*(Isotope*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Isotope G__TIsotope;
static int G__dictNuclearChart_162_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Isotope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Isotope*) (soff+(sizeof(Isotope)*i)))->~G__TIsotope();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Isotope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Isotope*) (soff))->~G__TIsotope();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dictNuclearChart_162_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isotope* dest = (Isotope*) G__getstructoffset();
   *dest = *(Isotope*) libp->para[0].ref;
   const Isotope& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NuclearChart */
static int G__dictNuclearChart_398_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) NuclearChart::GetInstance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Isotope* pobj;
         Isotope xobj = ((NuclearChart*) G__getstructoffset())->ParseName(*(string*) libp->para[0].ref);
         pobj = new Isotope(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((NuclearChart*) G__getstructoffset())->GetName((UInt_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) NuclearChart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NuclearChart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) NuclearChart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      NuclearChart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const NuclearChart*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NuclearChart*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NuclearChart*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NuclearChart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NuclearChart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NuclearChart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NuclearChart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__dictNuclearChart_398_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NuclearChart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__dictNuclearChart_398_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   NuclearChart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new NuclearChart(*(NuclearChart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef NuclearChart G__TNuclearChart;
static int G__dictNuclearChart_398_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (NuclearChart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((NuclearChart*) (soff+(sizeof(NuclearChart)*i)))->~G__TNuclearChart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (NuclearChart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((NuclearChart*) (soff))->~G__TNuclearChart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__dictNuclearChart_398_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NuclearChart* dest = (NuclearChart*) G__getstructoffset();
   *dest = *(NuclearChart*) libp->para[0].ref;
   const NuclearChart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Isotope */

/* NuclearChart */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncdictNuclearChart {
 public:
  G__Sizep2memfuncdictNuclearChart(): p(&G__Sizep2memfuncdictNuclearChart::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncdictNuclearChart::*p)();
};

size_t G__get_sizep2memfuncdictNuclearChart()
{
  G__Sizep2memfuncdictNuclearChart a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancedictNuclearChart() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabledictNuclearChart() {

   /* Setting up typedef entry */
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictNuclearChartLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictNuclearChartLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictNuclearChartLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__dictNuclearChartLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,UInt_t>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,std::string>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,string>",117,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,string,less<unsigned int> >",117,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Isotope */
static void G__setup_memvarIsotope(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope));
   { Isotope *p; p=(Isotope*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->A)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"A=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictNuclearChartLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NuclearChart */
static void G__setup_memvarNuclearChart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart));
   { NuclearChart *p; p=(NuclearChart*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart),-1,-2,4,"theInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),G__defined_typename("map<std::string,UInt_t>"),-1,4,"fNameMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR),G__defined_typename("map<UInt_t,std::string>"),-1,4,"fZMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__dictNuclearChartLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvardictNuclearChart() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncIsotope(void) {
   /* Isotope */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope));
   G__memfunc_setup("Isotope",739,G__dictNuclearChart_162_0_1, 105, G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Isotope",739,G__dictNuclearChart_162_0_2, 105, G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 10 - Z h - 'UInt_t' 10 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dictNuclearChart_162_0_3, 85, G__get_linked_tagnum(&G__dictNuclearChartLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Isotope::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dictNuclearChart_162_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isotope::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dictNuclearChart_162_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Isotope::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dictNuclearChart_162_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Isotope::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__dictNuclearChart_162_0_7, 85, G__get_linked_tagnum(&G__dictNuclearChartLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__dictNuclearChart_162_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__dictNuclearChart_162_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dictNuclearChart_162_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dictNuclearChart_162_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isotope::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dictNuclearChart_162_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isotope::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dictNuclearChart_162_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isotope::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dictNuclearChart_162_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isotope::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Isotope", 739, G__dictNuclearChart_162_0_15, (int) ('i'), G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope), -1, 0, 1, 1, 1, 0, "u 'Isotope' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Isotope", 865, G__dictNuclearChart_162_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dictNuclearChart_162_0_17, (int) ('u'), G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope), -1, 1, 1, 1, 1, 0, "u 'Isotope' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNuclearChart(void) {
   /* NuclearChart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart));
   G__memfunc_setup("GetInstance",1109,G__dictNuclearChart_398_0_1, 85, G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (NuclearChart* (*)())(&NuclearChart::GetInstance) ), 0);
   G__memfunc_setup("ParseName",892,G__dictNuclearChart_398_0_2, 117, G__get_linked_tagnum(&G__dictNuclearChartLN_Isotope), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__dictNuclearChart_398_0_3, 117, G__get_linked_tagnum(&G__dictNuclearChartLN_string), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NuclearChart",1212,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpNameMap",1168,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpZMap",873,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__dictNuclearChart_398_0_7, 85, G__get_linked_tagnum(&G__dictNuclearChartLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&NuclearChart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__dictNuclearChart_398_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NuclearChart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__dictNuclearChart_398_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&NuclearChart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__dictNuclearChart_398_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&NuclearChart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__dictNuclearChart_398_0_11, 85, G__get_linked_tagnum(&G__dictNuclearChartLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__dictNuclearChart_398_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__dictNuclearChart_398_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__dictNuclearChart_398_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__dictNuclearChart_398_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NuclearChart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__dictNuclearChart_398_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&NuclearChart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__dictNuclearChart_398_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NuclearChart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__dictNuclearChart_398_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&NuclearChart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("NuclearChart", 1212, G__dictNuclearChart_398_0_19, (int) ('i'), G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart), -1, 0, 1, 1, 1, 0, "u 'NuclearChart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~NuclearChart", 1338, G__dictNuclearChart_398_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__dictNuclearChart_398_0_21, (int) ('u'), G__get_linked_tagnum(&G__dictNuclearChartLN_NuclearChart), -1, 1, 1, 1, 1, 0, "u 'NuclearChart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncdictNuclearChart() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaldictNuclearChart() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcdictNuclearChart() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__dictNuclearChartLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_Isotope = { "Isotope" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_NuclearChart = { "NuclearChart" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR = { "map<unsigned int,string,less<unsigned int>,allocator<pair<const unsigned int,string> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabledictNuclearChart() {
  G__dictNuclearChartLN_TClass.tagnum = -1 ;
  G__dictNuclearChartLN_TBuffer.tagnum = -1 ;
  G__dictNuclearChartLN_TMemberInspector.tagnum = -1 ;
  G__dictNuclearChartLN_string.tagnum = -1 ;
  G__dictNuclearChartLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__dictNuclearChartLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictNuclearChartLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__dictNuclearChartLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__dictNuclearChartLN_Isotope.tagnum = -1 ;
  G__dictNuclearChartLN_NuclearChart.tagnum = -1 ;
  G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabledictNuclearChart() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_TClass);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_string);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_Isotope),sizeof(Isotope),-1,33024,(char*)NULL,G__setup_memvarIsotope,G__setup_memfuncIsotope);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_NuclearChart),sizeof(NuclearChart),-1,256,(char*)NULL,G__setup_memvarNuclearChart,G__setup_memfuncNuclearChart);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__dictNuclearChartLN_maplEunsignedsPintcOstringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOstringgRsPgRsPgR);
}
extern "C" void G__cpp_setupdictNuclearChart(void) {
  G__check_setup_version(30051515,"G__cpp_setupdictNuclearChart()");
  G__set_cpp_environmentdictNuclearChart();
  G__cpp_setup_tagtabledictNuclearChart();

  G__cpp_setup_inheritancedictNuclearChart();

  G__cpp_setup_typetabledictNuclearChart();

  G__cpp_setup_memvardictNuclearChart();

  G__cpp_setup_memfuncdictNuclearChart();
  G__cpp_setup_globaldictNuclearChart();
  G__cpp_setup_funcdictNuclearChart();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncdictNuclearChart();
  return;
}
class G__cpp_setup_initdictNuclearChart {
  public:
    G__cpp_setup_initdictNuclearChart() { G__add_setup_func("dictNuclearChart",(G__incsetup)(&G__cpp_setupdictNuclearChart)); G__call_setup_funcs(); }
   ~G__cpp_setup_initdictNuclearChart() { G__remove_setup_func("dictNuclearChart"); }
};
G__cpp_setup_initdictNuclearChart G__cpp_setup_initializerdictNuclearChart;

